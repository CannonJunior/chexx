name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  analyze:
    name: Code Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Run Flutter Analyze
        run: flutter analyze --no-congratulate

      - name: Check formatting
        run: dart format --set-exit-if-changed .

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: analyze

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Run tests with coverage
        run: flutter test --coverage --reporter expanded

      - name: Generate coverage report
        run: |
          sudo apt-get update
          sudo apt-get install -y lcov
          genhtml coverage/lcov.info -o coverage/html

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: chexx-coverage
          fail_ci_if_error: false

      - name: Archive coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/html

      - name: Check coverage threshold
        run: |
          COVERAGE=$(lcov --summary coverage/lcov.info 2>&1 | grep 'lines......:' | awk '{print $2}' | sed 's/%//')
          echo "Current coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 50.0" | bc -l) )); then
            echo "⚠️  Warning: Coverage is below 50%"
          else
            echo "✅ Coverage threshold met"
          fi

  build-web:
    name: Build Web
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Build web release
        run: flutter build web --release --no-source-maps

      - name: Archive web build
        uses: actions/upload-artifact@v3
        with:
          name: web-build
          path: build/web

  build-linux:
    name: Build Linux
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.3'
          channel: 'stable'

      - name: Install Linux dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev

      - name: Enable Linux desktop
        run: flutter config --enable-linux-desktop

      - name: Install dependencies
        run: flutter pub get

      - name: Build Linux release
        run: flutter build linux --release

      - name: Archive Linux build
        uses: actions/upload-artifact@v3
        with:
          name: linux-build
          path: build/linux/x64/release/bundle

  summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [analyze, test, build-web, build-linux]
    if: always()

    steps:
      - name: Check job results
        run: |
          echo "## CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Code Analysis: ${{ needs.analyze.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Unit Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Web Build: ${{ needs.build-web.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Linux Build: ${{ needs.build-linux.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All pipeline stages completed successfully! 🎉" >> $GITHUB_STEP_SUMMARY
